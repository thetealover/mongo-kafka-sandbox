import org.apache.tools.ant.filters.ReplaceTokens
import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}
plugins {
    id 'java'
    id 'groovy'
    id 'com.ncorti.ktfmt.gradle' version libs.versions.ktfmtPluginVersion
    id 'org.springframework.boot' version libs.versions.springBootVersion
    id 'org.jetbrains.kotlin.plugin.allopen' version libs.versions.kotlinAllOpenVersion
}
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-allopen'

group = "${group}"

springBoot.buildInfo {
    properties {
        version = "${version}"
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of("${javaVersion}")
kotlin.jvmToolchain {
    languageVersion.set(JavaLanguageVersion.of("${javaVersion}"))
}
jar.enabled = false

ktfmt {
    googleStyle()
}

bootRun {
    mainClass.set('com.mongokafka.sandbox.consumer.ws.ConsumerWs')
}

bootJar {
    mainClass.set('com.mongokafka.sandbox.consumer.ws.ConsumerWs')
}

dependencyManagement.imports {
    mavenBom SpringBootPlugin.BOM_COORDINATES
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation "org.springframework.kafka:spring-kafka:${libs.versions.springKafkaVersion.get()}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${libs.versions.springdocOpenApiVersion.get()}"

    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "io.github.oshai:kotlin-logging:${libs.versions.kotlinLoggingVersion.get()}"

    //JSR-305 annotations
    implementation "com.github.spotbugs:spotbugs-annotations:${libs.versions.spotBugsAnnotationsVersion.get()}"
}

// populating values from gradle.properties to the specified spring application properties files
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    with copySpec {
        from 'src/main/resources'
        include '**/application*.properties'
        include '**/application*.yaml'
        include '**/application*.yml'
        include '/bootstrap-local.yml'
        project.properties.findAll().each {
            prop ->
                if (prop.key != null && 'version' == prop.key) {
                    filter(ReplaceTokens, tokens: [(prop.key): prop.value.toString()])
                    filter(ReplaceTokens, tokens: [('project.' + prop.key): prop.value.toString()])
                }
        }
    }
}
